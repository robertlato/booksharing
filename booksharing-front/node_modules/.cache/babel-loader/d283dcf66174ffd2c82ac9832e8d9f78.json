{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_ERROR, REGISTER_FAIL, USER_LOADED, REGISTER_USER, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert';\nexport const getUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const registerUser = formData => async dispatch => {\n  const {\n    login,\n    email,\n    password\n  } = formData;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    login,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth/register', body, config);\n    dispatch({\n      type: REGISTER_USER,\n      payload: res.data\n    });\n    dispatch(getUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error)));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const loginUser = formData => async dispatch => {\n  const {\n    login,\n    password\n  } = formData;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    login,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(getUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error)));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/robert/Projects/Booksharing/booksharing-front/src/actions/auth.js"],"names":["axios","AUTH_ERROR","REGISTER_FAIL","USER_LOADED","REGISTER_USER","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","setAuthToken","setAlert","getUser","dispatch","localStorage","token","res","get","type","payload","data","err","registerUser","formData","login","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","loginUser","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { AUTH_ERROR, REGISTER_FAIL, USER_LOADED, REGISTER_USER, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert';\n\nexport const getUser = () => async dispatch => {\n    if (localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n\n    try {\n        const res = await axios.get('/api/auth');\n\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        });\n\n    } catch (err) {\n        dispatch({\n            type: AUTH_ERROR\n        })\n    }\n}\n\nexport const registerUser = (formData) => async dispatch => {\n    const { login, email, password } = formData;\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({\n        login,\n        email,\n        password,\n    });\n\n    try {\n        const res = await axios.post('/api/auth/register', body, config)\n\n        dispatch({\n            type: REGISTER_USER,\n            payload: res.data,\n        });\n\n        dispatch(getUser());\n\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error)));\n        }\n\n        dispatch({\n            type: REGISTER_FAIL,\n        });\n    }\n}\n\nexport const loginUser = formData => async dispatch => {\n    const { login, password } = formData;\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({\n        login,\n        password\n    });\n\n    try {\n        const res = await axios.post('/api/auth/login', body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data,\n        });\n\n        dispatch(getUser());\n\n\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error)));\n        }\n\n        dispatch({\n            type: LOGIN_FAIL,\n        });\n    }\n}\n\nexport const logout = () => dispatch => {\n    dispatch({\n        type: LOGOUT\n    })\n}"]},"metadata":{},"sourceType":"module"}